#!/usr/bin/env ruby

require 'json'
require 'mechanize'
require 'nokogiri'
require 'fileutils'
require 'colorize'

@agent = Mechanize.new
# Adding a proper user-agent to mimic a normal browser
@agent.user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
# Add reasonable delay between requests to avoid being blocked
# @agent.throttle = { :delay => 1 }

def msg(msg)
  puts "[*] #{msg}".blue
  $stdout.flush
end

def countries
  countries = []
  html = @agent.get("https://ipinfo.io/countries/").body()
  Nokogiri::HTML(html).css(".grid.md:grid-cols-3 div").each do |div|
    link = div.css("a")[0]
    if link
      name = link.text
      url = link["href"].split("/")[2]
      counts = div.css("span")[0].text
      country = {"name"=>name, "cc"=>url, "counts"=>counts}
      countries.push(country)
    end

    # if td.length > 0
    #   name = td[0].text
    #   url = td[0].css("a")[0]["href"].split("/")[2]
    #   counts = td[1].text
    #   country = {"name"=>name, "cc"=>url, "counts"=>counts}
    #   countries.push(country)
    # end
  end
  return countries
end

def asn(country_code)
  asns = []
  begin
    html = @agent.get("https://ipinfo.io/countries/#{country_code}").body()
  rescue Mechanize::ResponseCodeError => e
    puts e.inspect
    return []  # Return empty array instead of nil
  end
  
  # Fixed CSS selector - the table structure might have changed on the website
  tables = Nokogiri::HTML(html).css("section.space-y-14")
  return [] if tables.empty?
  asn = tables.css('div')[0];

  table = asn.css("table")
  table.css('tr') do |tr|
    td = tr.css('td')
    next if td.empty? || td[0].text.strip.empty?

    begin
      asn = td[0].css("a")[0]["href"].split("/")[1]
      name = td[1].text.strip
      count = td[2].text.strip

      asn_data = {"name"=>name, "asn"=>asn, "count"=>count}
      asns.push(asn_data)
    rescue => e
      puts "Error parsing row: #{e.message}"
      next
    end
  end

  # tables.css("div").each do |tr|
  #   td = tr.css('td')
  #   next if td.empty? || td[0].text.strip.empty?
    
  #   if td.length > 2 && !td[0].css("a").empty?
  #     begin
  #       asn = td[0].css("a")[0]["href"].split("/")[1]
  #       name = td[1].text.strip
  #       count = td[2].text.strip

  #       asn_data = {"name"=>name, "asn"=>asn, "count"=>count}
  #       asns.push(asn_data)
  #     rescue => e
  #       puts "Error parsing row: #{e.message}"
  #       next
  #     end
  #   end
  # end 
  return asns
end

def ranges_from_asn(asn)
  ranges = []
  begin
    html = @agent.get("https://ipinfo.io/#{asn}").body
  rescue Mechanize::ResponseCodeError => e
    puts e.inspect
    return []  # Return empty array instead of nil
  end 
  
  # Adding error handling for when the blocks table doesn't exist
  blocks_table = Nokogiri::HTML(html).css("#block-ranges table tbody tr")
  return [] if blocks_table.empty?
  
  blocks_table.each do |tr|
    td = tr.css("td")
    next if td.empty? || td.css("a").empty?
    
    range = td.css("a").text.gsub("\n", "").gsub(" ", "")
    ranges.push(range) unless range.empty?
  end
  return ranges
end

companies = {
  "amazon"=>{
    "glob"=>"amazon",
    "asn"=>{}
  },
  "microsoft"=>{
    "glob"=>"microsoft",
    "asn"=>{}
  },
  "digitalocean"=>{
    "glob"=>"digitalocean",
    "asn"=>{}
  },
  "godaddy"=>{
    "glob"=>"godaddy",
    "asn"=>{}
  },
  "google"=>{
    "glob"=>"google",
    "asn"=>{}
  },
  "linode"=>{
    "glob"=>"linode",
    "asn"=>{}
  },
  "ovh"=>{
    "glob"=>"ovh",
    "asn"=>{}
  },
  "rackspace"=>{
    "glob"=>"rackspace",
    "asn"=>{}
  },
  "vultr"=>{
    "glob"=>"choopa",
    "asn"=>{}
  },
  "dedicated.com"=>{
    "glob"=>"Dedicated.com",
    "asn"=>{}
  },
  "hetzner"=>{
    "glob"=>"hetzner",
    "asn"=>{}
  },
  "at&t"=>{
    "glob"=>"at&t",
    "asn"=>{}
  },
  "telefonica"=>{
    "glob"=>"telefonica",
    "asn"=>{}
  },
  "bt"=>{
    "glob"=>"british telecommunications",
    "asn"=>{}
  },
  "cdn77"=>{
    "glob"=>"datacamp limited",
    "asn"=>{}
  }
}

FileUtils.mkdir_p 'index'
FileUtils.mkdir_p 'companies'

countries = ["us", "gb", "fr", "de", "ru", "au", "pl", "ca", "cn", "nl", "id", "in", "ua", "nz", "mx", "cz", "il", "my", "ie", "tw", "be", "ky"]
# countries = ["us", "gb", "ie", "fr", "au", "ru", "ca"]

### Iterate and pull company names with ASN numbers and write to JSON files.
countries.each do |country|
  if !File.exist? "index/#{country}.json"
    msg "Pulling ASN data for #{country}.."
    country_data = asn(country)
    
    if !country_data.empty?
      File.open("index/#{country}.json", "w") {|file|file.write(JSON.pretty_generate(country_data))}
      # Add a reasonable delay between requests
      msg "Waiting 5 seconds to avoid rate limiting..."
      sleep 5
    else
      msg "No data found for #{country}, skipping..."
      next
    end
  end
  
  begin
    country_data = JSON.parse(File.open("index/#{country}.json", "r").read())
  rescue JSON::ParserError => e
    msg "Error parsing JSON for #{country}: #{e.message}"
    next
  end

  # Iterate through each company in country JSON
  country_data.each do |company|
    companyname = company["name"].downcase
    
    companies.keys.each do |company_f|
      # If ASN name includes the "glob" push it to the ASN array
      if companyname.include? companies[company_f]["glob"].downcase
        asn = company["asn"]
        companies[company_f]["asn"][asn] = []
      end
    end
  end
end

global_ranges = ""

companies.keys.each do |company|
  FileUtils.mkdir_p "companies/#{company}/"
  company_data = {}
  
  if File.exist? "companies/#{company}/#{company}.json"
    begin
      company_data = JSON.parse(File.open("companies/#{company}/#{company}.json", "r").read())
    rescue JSON::ParserError => e
      msg "Error parsing JSON for #{company}: #{e.message}"
      company_data = {"asn" => {}}
    end

    if !File.exist? "companies/#{company}/ranges.txt"
      ranges_file = File.open("companies/#{company}/ranges.txt", "w")
      if company_data.has_key?("asn") && !company_data["asn"].empty?
        company_data["asn"].keys.each do |asn|
          company_data["asn"][asn].each do |asn_ranges|
            asn_ranges.each do |range|
              ranges_file.write("#{range}\n")
              global_ranges += "#{range}\n"
            end
          end
        end
      end
      ranges_file.close
    else
      # If ranges.txt already exists, add to global_ranges
      if company_data.has_key?("asn")
        company_data["asn"].each do |asn, range_data|
          range_data.each do |ranges|
            ranges.each do |range|
              global_ranges += "#{range}\n"
            end
          end
        end
      end
    end
  else
    # Create new company data if file doesn't exist
    company_data = {"asn" => {}}
  end  

  # Make a copy of the glob property to preserve it
  glob_value = companies[company]["glob"]
  
  companies[company]["asn"].keys.each do |asn|
    if company_data.has_key?("asn") && company_data["asn"].has_key?(asn)
      if company_data["asn"][asn].empty?
        msg "Pulling #{asn} for #{company}"
        range_data = ranges_from_asn(asn)
        if !range_data.empty?
          company_data["asn"][asn] = [range_data]
        end
        File.open("companies/#{company}/#{company}.json", "w") { |file| file.write(JSON.pretty_generate(company_data)) }
        # Add delay between requests
        sleep 3
      end
    else
      msg "Pulling #{asn} for #{company}"
      range_data = ranges_from_asn(asn)
      if !range_data.empty?
        company_data["asn"][asn] = [range_data]
      end
      File.open("companies/#{company}/#{company}.json", "w") { |file| file.write(JSON.pretty_generate(company_data)) }
      # Add delay between requests
      sleep 3
    end
  end
  
  # Restore the glob property
  companies[company]["glob"] = glob_value
end

FileUtils.mkdir_p "all"
File.open("all/ranges.txt", "w") {|file| file.write(global_ranges) }

msg "Script completed successfully!"