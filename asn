#!/usr/bin/env ruby

require 'json'
require 'mechanize'
require 'nokogiri'
require 'fileutils'
require 'colorize'


TARGET_COUNTRIES = %w[us gb fr de ru au pl ca cn nl id in ua nz mx cz il my ie tw be ky].freeze

@agent = Mechanize.new
@agent.user_agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'

companies = {
  "amazon"=>{
    "glob"=>"amazon",
    "asn"=>{}
  },
  "microsoft"=>{
    "glob"=>"microsoft",
    "asn"=>{}
  },
  "digitalocean"=>{
    "glob"=>"digitalocean",
    "asn"=>{}
  },
  "godaddy"=>{
    "glob"=>"godaddy",
    "asn"=>{}
  },
  "google"=>{
    "glob"=>"google",
    "asn"=>{}
  },
  "linode"=>{
    "glob"=>"linode",
    "asn"=>{}
  },
  "ovh"=>{
    "glob"=>"ovh",
    "asn"=>{}
  },
  "rackspace"=>{
    "glob"=>"rackspace",
    "asn"=>{}
  },
  "vultr"=>{
    "glob"=>"choopa",
    "asn"=>{}
  },
  "dedicated.com"=>{
    "glob"=>"Dedicated.com",
    "asn"=>{}
  },
  "hetzner"=>{
    "glob"=>"hetzner",
    "asn"=>{}
  },
  "at&t"=>{
    "glob"=>"at&t",
    "asn"=>{}
  },
  "telefonica"=>{
    "glob"=>"telefonica",
    "asn"=>{}
  },
  "bt"=>{
    "glob"=>"british telecommunications",
    "asn"=>{}
  },
  "cdn77"=>{
    "glob"=>"datacamp limited",
    "asn"=>{}
  }
}


def msg(text)
  puts "[*] #{text}".blue
  $stdout.flush
end

def safe_read_json(path)
  JSON.parse(File.read(path))
rescue StandardError => e
  msg "Error reading #{path}: #{e.message}"
  {}
end

def write_json(path, data)
  File.write(path, JSON.pretty_generate(data))
end

def request_with_retry(url, max_retries = 3, base_delay = 5)
  retries = 0
  begin
    @agent.get(url)
  rescue Mechanize::ResponseCodeError => e
    if %w[429 503].include?(e.response_code) && retries < max_retries
      retries += 1
      delay = base_delay * (2**(retries - 1))
      msg "Rate limited (#{e.response_code}). Retry in #{delay}s..."
      sleep delay
      retry
    else
      raise e
    end
  end
end

# Logic
def asn(country_code, page = 0, asns = [])
  url = "https://ipinfo.io/api/data/asns?country=#{country_code}&amount=20&page=#{page}"
  msg "Fetching #{url}"

  begin
    response = request_with_retry(url)
    data = JSON.parse(response.body)
  rescue Mechanize::ResponseCodeError, JSON::ParserError => e
    msg "Error fetching ASN for #{country_code}: #{e}"
    return asns
  end

  return asns if data.empty?

  parsed = data.map { |item| { "name" => item['name'], "asn" => item['asn'], "count" => item['numberOfIps'] } }
  asns.concat(parsed)

  sleep 0.5
  asn(country_code, page + 1, asns)
end

def ranges_from_asn(asn)
  url = "https://ipinfo.io/#{asn}"
  msg "Fetching ranges for #{asn}"
  begin
    html = @agent.get(url).body
    Nokogiri::HTML(html).css("#block-ranges table tbody tr").map do |row|
      row.css("td a").text.strip
    end.reject(&:empty?)
  rescue => e
    msg "Error fetching #{asn}: #{e}"
    []
  end
end


FileUtils.mkdir_p(['index', 'companies', 'all'])

TARGET_COUNTRIES.each do |country|
  index_file = "index/#{country}.json"

  unless File.exist?(index_file)
    data = asn(country)
    if data.empty?
      msg "No ASN data for #{country}, skipping..."
      next
    end
    write_json(index_file, data)
    sleep 5
  end

  data = safe_read_json(index_file)
  data.each do |entry|
    name = entry["name"].downcase
    companies.each do |key, cfg|
      if name.include?(cfg["glob"].downcase)
        companies[key]["asn"] ||= {}
        companies[key]["asn"][entry["asn"]] ||= []
      end
    end
  end
end

global_ranges = ""

companies.each do |company, cfg|
  dir = "companies/#{company}"
  FileUtils.mkdir_p(dir)
  file = "#{dir}/#{company}.json"
  data = File.exist?(file) ? safe_read_json(file) : { "asn" => {} }

  cfg["asn"].each_key do |asn|
    next if data["asn"].key?(asn) && !data["asn"][asn].empty?

    ranges = ranges_from_asn(asn)
    next if ranges.empty?

    data["asn"][asn] = [ranges]
    write_json(file, data)
    sleep 3
  end

  ranges_txt = "#{dir}/ranges.txt"
  unless File.exist?(ranges_txt)
    File.open(ranges_txt, "w") do |f|
      data["asn"].each_value do |asn_ranges|
        asn_ranges.flatten.each do |r|
          f.puts r
          global_ranges << "#{r}\n"
        end
      end
    end
  end

  data["asn"].each_value do |asn_ranges|
    asn_ranges.flatten.each { |r| global_ranges << "#{r}\n" }
  end
end

File.write("all/ranges.txt", global_ranges)
msg "âœ… Script completed successfully!"